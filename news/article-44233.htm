<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://clashnode.github.io/news/article-44233.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <title>浅谈Redis缓存和数据库一致性问题</title>
    <link rel="icon" href="/assets/website/img/clashnode/favicon.ico" type="image/x-icon"/>
        <meta name="description" content="最近面试季节，估计「如何保证缓存和数据库一致性」这个问题经常会被问到，这是一个老生常谈的话题了。 但很多人对这个问题，依旧有很多疑惑：  到底是更新缓存还是删缓存？ 到底选择先更新数据库，再删除缓存，" />
    
    <meta name="author" content="Clash Node官网订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://clashnode.github.io/news/article-44233.htm" />
    <meta property="og:site_name" content="Clash Node官网订阅站" />
    <meta property="og:title" content="浅谈Redis缓存和数据库一致性问题" />
    <meta property="og:image" content="https://clashnode.github.io/uploads/20240214/63b3d8b1b5bf3bf70ae5148a3b7448cf.webp" />
        <meta property="og:release_date" content="2025-01-22T10:10:38" />
    <meta property="og:updated_time" content="2025-01-22T10:10:38" />
        <meta property="og:description" content="最近面试季节，估计「如何保证缓存和数据库一致性」这个问题经常会被问到，这是一个老生常谈的话题了。 但很多人对这个问题，依旧有很多疑惑：  到底是更新缓存还是删缓存？ 到底选择先更新数据库，再删除缓存，" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="浅谈Redis缓存和数据库一致性问题">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">

    <link href="https://fonts.googleapis.com/css2?family=Jost:wght@300;400;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/assets/website/css/clashnode/style-starter.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-8B9V1K3BBT"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-8B9V1K3BBT');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- header -->
    <header id="site-header" class="fixed-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg stroke">
                <a class="navbar-brand" href="/">
                                        <span class="fa fa-laptop"></span> Clash Node                </a>
                <button class="navbar-toggler  collapsed bg-gradient" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="navbar-toggler-icon fa icon-expand fa-bars"></span>
                    <span class="navbar-toggler-icon fa icon-close fa-times"></span>
                    </span>
                </button>
                <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
                    <ul class="navbar-nav ml-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="#">关于</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#">联系</a>
                        </li>
                    </ul>
                </div>
                <!-- toggle switch for light and dark theme -->
                <div class="mobile-position">
                    <nav class="navigation">
                        <div class="theme-switch-wrapper">
                            <label class="theme-switch" for="checkbox">
                                <input type="checkbox" id="checkbox">
                                <div class="mode-container">
                                    <i class="gg-sun"></i>
                                    <i class="gg-moon"></i>
                                </div>
                            </label>
                        </div>
                    </nav>
                </div>
                <!-- //toggle switch for light and dark theme -->
            </nav>
        </div>
    </header>
    <!-- //header -->
    <!-- about breadcrumb -->
    <section class="w3l-about-breadcrumb text-center">
        <div class="breadcrumb-bg breadcrumb-bg-about py-sm-5 py-4">
            <div class="container py-2">
                <h1 class="title" style="word-break: break-all;">浅谈Redis缓存和数据库一致性问题</h1>
                <ul class="breadcrumbs-custom-path mt-2">
                    <li><a href="/">首页</a></li>
                    <li><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span></li>
                    <li><a href="/news/">新闻资讯</a></li>
                    <li class="active"><span class="fa fa-arrow-right mx-2" aria-hidden="true"></span> 正文</li>
                </ul>
            </div>
        </div>
    </section>
    <!-- //about breadcrumb -->
    <div class="container py-lg-5 py-3">
        <div class="row">
            <div class="col-md-8">
                                <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="htmledit_views"> <p>最近面试季节，估计「如何保证缓存和数据库一致性」这个问题经常会被问到，这是一个老生常谈的话题了。</p> <p>但很多人对这个问题，依旧有很多疑惑：</p> <ul> <li>到底是更新缓存还是删缓存？</li> <li>到底选择先更新数据库，再删除缓存，还是先删除缓存，再更新数据库？</li> <li>为什么要引入消息队列保证一致性？</li> <li>延迟双删会有什么问题？到底要不要用？</li> <li>...</li> </ul> <p>这篇文章，我们就来把这些问题讲清楚。</p> <p><strong>这篇文章干货很多，希望你可以耐心读完。</strong></p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220823/2871feccb79bfb4ff65ee0d80d92ea86.jpg"></p> <h2>引入缓存提高性能</h2> <p>我们从最简单的场景开始讲起。</p> <p>如果你的业务处于起步阶段，流量非常小，那无论是读请求还是写请求，直接操作数据库即可，这时你的架构模型是这样的：</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220823/357222cb446c5825e450d4e4a028e66a.jpg"></p> <p>但随着业务量的增长，你的项目请求量越来越大，这时如果每次都从数据库中读数据，那肯定会有性能问题。</p> <p>这个阶段通常的做法是，引入「缓存」来提高读性能，架构模型就变成了这样：</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220823/08837c9280656b91af4201c879cbb1bb.jpg"></p> <p>当下优秀的缓存中间件，当属 Redis 莫属，它不仅性能非常高，还提供了很多友好的数据类型，可以很好地满足我们的业务需求。</p> <p>但引入缓存之后，你就会面临一个问题：<strong>之前数据只存在数据库中，现在要放到缓存中读取，具体要怎么存呢？</strong></p> <p>最简单直接的方案是「全量数据刷到缓存中」：</p> <ul> <li>数据库的数据，全量刷入缓存（不设置失效时间）</li> <li>写请求只更新数据库，不更新缓存</li> <li>启动一个定时任务，定时把数据库的数据，更新到缓存中</li> </ul> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220823/9a8d850582a7fe173350d54d1959be7f.jpg"></p> <p>这个方案的优点是，所有读请求都可以直接「命中」缓存，不需要再查数据库，性能非常高。</p> <p>但缺点也很明显，有 2 个问题：</p> <ol> <li><strong>缓存利用率低</strong>：不经常访问的数据，还一直留在缓存中</li> <li><strong>数据不一致</strong>：因为是「定时」刷新缓存，缓存和数据库存在不一致（取决于定时任务的执行频率）</li> </ol> <p>所以，这种方案一般更适合业务「体量小」，且对数据一致性要求不高的业务场景。</p> <p>那如果我们的业务体量很大，怎么解决这 2 个问题呢？</p> <h2>缓存利用率和一致性问题</h2> <p>先来看第一个问题，如何提高缓存利用率？</p> <p>想要缓存利用率「最大化」，我们很容易想到的方案是，缓存中只保留最近访问的「热数据」。但具体要怎么做呢？</p> <p>我们可以这样优化：</p> <ul> <li>写请求依旧只写数据库</li> <li>读请求先读缓存，如果缓存不存在，则从数据库读取，并重建缓存</li> <li>同时，写入缓存中的数据，都设置失效时间</li> </ul> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220823/203d8cece7df3afb03f426b12b6e00a5.jpg"></p> <p>这样一来，缓存中不经常访问的数据，随着时间的推移，都会逐渐「过期」淘汰掉，最终缓存中保留的，都是经常被访问的「热数据」，缓存利用率得以最大化。</p> <p>再来看数据一致性问题。</p> <p>要想保证缓存和数据库「实时」一致，那就不能再用定时任务刷新缓存了。</p> <p>所以，当数据发生更新时，我们不仅要操作数据库，还要一并操作缓存。具体操作就是，修改一条数据时，不仅要更新数据库，也要连带缓存一起更新。</p> <p>但数据库和缓存都更新，又存在先后问题，那对应的方案就有 2 个：</p> <ol> <li>先更新缓存，后更新数据库</li> <li>先更新数据库，后更新缓存</li> </ol> <p>哪个方案更好呢？</p> <p>先不考虑并发问题，正常情况下，无论谁先谁后，都可以让两者保持一致，但现在我们需要重点考虑「异常」情况。</p> <p>因为操作分为两步，那么就很有可能存在「第一步成功、第二步失败」的情况发生。</p> <p>这 2 种方案我们一个个来分析。</p> <p><strong>1) 先更新缓存，后更新数据库</strong></p> <p>如果缓存更新成功了，但数据库更新失败，那么此时缓存中是最新值，但数据库中是「旧值」。</p> <p>虽然此时读请求可以命中缓存，拿到正确的值，但是，一旦缓存「失效」，就会从数据库中读取到「旧值」，重建缓存也是这个旧值。</p> <p>这时用户会发现自己之前修改的数据又「变回去」了，对业务造成影响。</p> <p><strong>2) 先更新数据库，后更新缓存</strong></p> <p>如果数据库更新成功了，但缓存更新失败，那么此时数据库中是最新值，缓存中是「旧值」。</p> <p>之后的读请求读到的都是旧数据，只有当缓存「失效」后，才能从数据库中得到正确的值。</p> <p>这时用户会发现，自己刚刚修改了数据，但却看不到变更，一段时间过后，数据才变更过来，对业务也会有影响。</p> <p>可见，无论谁先谁后，但凡后者发生异常，就会对业务造成影响。那怎么解决这个问题呢？</p> <p>别急，后面我会详细给出对应的解决方案。</p> <p>我们继续分析，除了操作失败问题，还有什么场景会影响数据一致性？</p> <p>这里我们还需要重点关注：<strong>并发问题</strong>。</p> <h2>并发引发的一致性问题</h2> <p>假设我们采用「先更新数据库，再更新缓存」的方案，并且两步都可以「成功执行」的前提下，如果存在并发，情况会是怎样的呢？</p> <p>有线程 A 和线程 B 两个线程，需要更新「同一条」数据，会发生这样的场景：</p> <ol> <li>线程 A 更新数据库（X = 1）</li> <li>线程 B 更新数据库（X = 2）</li> <li>线程 B 更新缓存（X = 2）</li> <li>线程 A 更新缓存（X = 1）</li> </ol> <p>最终 X 的值在缓存中是 1，在数据库中是 2，发生不一致。</p> <p>也就是说，A 虽然先于 B 发生，但 B 操作数据库和缓存的时间，却要比 A 的时间短，执行时序发生「错乱」，最终这条数据结果是不符合预期的。</p> <blockquote><p>  同样地，采用「先更新缓存，再更新数据库」的方案，也会有类似问题，这里不再详述。</p></blockquote> <p>除此之外，我们从「缓存利用率」的角度来评估这个方案，也是不太推荐的。</p> <p>这是因为每次数据发生变更，都「无脑」更新缓存，但是缓存中的数据不一定会被「马上读取」，这就会导致缓存中可能存放了很多不常访问的数据，浪费缓存资源。</p> <p>而且很多情况下，写到缓存中的值，并不是与数据库中的值一一对应的，很有可能是先查询数据库，再经过一系列「计算」得出一个值，才把这个值才写到缓存中。</p> <p>由此可见，这种「更新数据库 + 更新缓存」的方案，不仅缓存利用率不高，还会造成机器性能的浪费。</p> <p>所以此时我们需要考虑另外一种方案：<strong>删除缓存</strong>。</p> <h2>删除缓存可以保证一致性吗？</h2> <p>删除缓存对应的方案也有 2 种：</p> <ol> <li>先删除缓存，后更新数据库</li> <li>先更新数据库，后删除缓存</li> </ol> <p>经过前面的分析我们已经得知，但凡「第二步」操作失败，都会导致数据不一致。</p> <p>这里我不再详述具体场景，你可以按照前面的思路推演一下，就可以看到依旧存在数据不一致的情况。</p> <p>这里我们重点来看「并发」问题。</p> <p><strong>1) 先删除缓存，后更新数据库</strong></p> <p>如果有 2 个线程要并发「读写」数据，可能会发生以下场景：</p> <ol> <li>线程 A 要更新 X = 2（原值 X = 1）</li> <li>线程 A 先删除缓存</li> <li>线程 B 读缓存，发现不存在，从数据库中读取到旧值（X = 1）</li> <li>线程 A 将新值写入数据库（X = 2）</li> <li>线程 B 将旧值写入缓存（X = 1）</li> </ol> <p>最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），发生不一致。</p> <p>可见，先删除缓存，后更新数据库，当发生「读+写」并发时，还是存在数据不一致的情况。</p> <p><strong>2) 先更新数据库，后删除缓存</strong></p> <p>依旧是 2 个线程并发「读写」数据：</p> <ol> <li>缓存中 X 不存在（数据库 X = 1）</li> <li>线程 A 读取数据库，得到旧值（X = 1）</li> <li>线程 B 更新数据库（X = 2)</li> <li>线程 B 删除缓存</li> <li>线程 A 将旧值写入缓存（X = 1）</li> </ol> <p>最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），也发生不一致。</p> <p>这种情况「理论」来说是可能发生的，但实际真的有可能发生吗？</p> <p>其实概率「很低」，这是因为它必须满足 3 个条件：</p> <ol> <li>缓存刚好已失效</li> <li>读请求 + 写请求并发</li> <li>更新数据库 + 删除缓存的时间（步骤 3-4），要比读数据库 + 写缓存时间短（步骤 2 和 5）</li> </ol> <p>仔细想一下，条件 3 发生的概率其实是非常低的。</p> <p>因为写数据库一般会先「加锁」，所以写数据库，通常是要比读数据库的时间更长的。</p> <p>这么来看，「先更新数据库 + 再删除缓存」的方案，是可以保证数据一致性的。</p> <p>所以，我们应该采用这种方案，来操作数据库和缓存。</p> <p>好，解决了并发问题，我们继续来看前面遗留的，<strong>第二步执行「失败」导致数据不一致的问题</strong>。</p> <h2>如何保证两步都执行成功？</h2> <p>前面我们分析到，无论是更新缓存还是删除缓存，只要第二步发生失败，那么就会导致数据库和缓存不一致。</p> <p><strong>保证第二步成功执行，就是解决问题的关键。</strong></p> <p>想一下，程序在执行过程中发生异常，最简单的解决办法是什么？</p> <p>答案是：<strong>重试</strong>。</p> <p>是的，其实这里我们也可以这样做。</p> <p>无论是先操作缓存，还是先操作数据库，但凡后者执行失败了，我们就可以发起重试，尽可能地去做「补偿」。</p> <p>那这是不是意味着，只要执行失败，我们「无脑重试」就可以了呢？</p> <p>答案是否定的。现实情况往往没有想的这么简单，失败后立即重试的问题在于：</p> <ul> <li>立即重试很大概率「还会失败」</li> <li>「重试次数」设置多少才合理？</li> <li>重试会一直「占用」这个线程资源，无法服务其它客户端请求</li> </ul> <p>看到了么，虽然我们想通过重试的方式解决问题，但这种「同步」重试的方案依旧不严谨。</p> <p>那更好的方案应该怎么做？</p> <p>答案是：<strong>异步重试</strong>。什么是异步重试？</p> <p>其实就是把重试请求写到「消息队列」中，然后由专门的消费者来重试，直到成功。</p> <p>或者更直接的做法，为了避免第二步执行失败，我们可以把操作缓存这一步，直接放到消息队列中，由消费者来操作缓存。</p> <p>到这里你可能会问，写消息队列也有可能会失败啊？而且，引入消息队列，这又增加了更多的维护成本，这样做值得吗？</p> <p>这个问题很好，但我们思考这样一个问题：如果在执行失败的线程中一直重试，还没等执行成功，此时如果项目「重启」了，那这次重试请求也就「丢失」了，那这条数据就一直不一致了。</p> <p>所以，这里我们必须把重试或第二步操作放到另一个「服务」中，这个服务用「消息队列」最为合适。这是因为消息队列的特性，正好符合我们的需求：</p> <ul> <li><strong>消息队列保证可靠性</strong>：写到队列中的消息，成功消费之前不会丢失（重启项目也不担心）</li> <li><strong>消息队列保证消息成功投递</strong>：下游从队列拉取消息，成功消费后才会删除消息，否则还会继续投递消息给消费者（符合我们重试的场景）</li> </ul> <p>至于写队列失败和消息队列的维护成本问题：</p> <ul> <li><strong>写队列失败</strong>：操作缓存和写消息队列，「同时失败」的概率其实是很小的</li> <li><strong>维护成本</strong>：我们项目中一般都会用到消息队列，维护成本并没有新增很多</li> </ul> <p>所以，引入消息队列来解决这个问题，是比较合适的。这时架构模型就变成了这样：</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220823/42a37cc538250e9b70026d207d7893b0.jpg"></p> <p>那如果你确实不想在应用中去写消息队列，是否有更简单的方案，同时又可以保证一致性呢？</p> <p>方案还是有的，这就是近几年比较流行的解决方案：<strong>订阅数据库变更日志，再操作缓存</strong>。</p> <p>具体来讲就是，我们的业务应用在修改数据时，「只需」修改数据库，无需操作缓存。</p> <p>那什么时候操作缓存呢？这就和数据库的「变更日志」有关了。</p> <p>拿 MySQL 举例，当一条数据发生修改时，MySQL 就会产生一条变更日志（Binlog），我们可以订阅这个日志，拿到具体操作的数据，然后再根据这条数据，去删除对应的缓存。</p> <p class="img-center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220823/8a92b799e190d020721dce8df83a5652.jpg"></p> <p>订阅变更日志，目前也有了比较成熟的开源中间件，例如阿里的 canal，使用这种方案的优点在于：</p> <ul> <li><strong>无需考虑写消息队列失败情况</strong>：只要写 MySQL 成功，Binlog 肯定会有</li> <li><strong>自动投递到下游队列</strong>：canal 自动把数据库变更日志「投递」给下游的消息队列</li> </ul> <p>当然，与此同时，我们需要投入精力去维护 canal 的高可用和稳定性。</p> <blockquote><p>  如果你有留意观察很多数据库的特性，就会发现其实很多数据库都逐渐开始提供「订阅变更日志」的功能了，相信不远的将来，我们就不用通过中间件来拉取日志，自己写程序就可以订阅变更日志了，这样可以进一步简化流程。</p></blockquote> <p>至此，我们可以得出结论，想要保证数据库和缓存一致性，<strong>推荐采用「先更新数据库，再删除缓存」方案，并配合「消息队列」或「订阅变更日志」的方式来做</strong>。</p> <h2>主从库延迟和延迟双删问题</h2> <p>到这里，还有 2 个问题，是我们没有重点分析过的。</p> <p><strong>第一个问题</strong>，还记得前面讲到的「先删除缓存，再更新数据库」方案，导致不一致的场景么？</p> <p>这里我再把例子拿过来让你复习一下：</p> <p>2 个线程要并发「读写」数据，可能会发生以下场景：</p> <ol> <li>线程 A 要更新 X = 2（原值 X = 1）</li> <li>线程 A 先删除缓存</li> <li>线程 B 读缓存，发现不存在，从数据库中读取到旧值（X = 1）</li> <li>线程 A 将新值写入数据库（X = 2）</li> <li>线程 B 将旧值写入缓存（X = 1）</li> </ol> <p>最终 X 的值在缓存中是 1（旧值），在数据库中是 2（新值），发生不一致。</p> <p><strong>第二个问题</strong>：是关于「读写分离 + 主从复制延迟」情况下，缓存和数据库一致性的问题。</p> <p>在「先更新数据库，再删除缓存」方案下，「读写分离 + 主从库延迟」其实也会导致不一致：</p> <ol> <li>线程 A 更新主库 X = 2（原值 X = 1）</li> <li>线程 A 删除缓存</li> <li>线程 B 查询缓存，没有命中，查询「从库」得到旧值（从库 X = 1）</li> <li>从库「同步」完成（主从库 X = 2）</li> <li>线程 B 将「旧值」写入缓存（X = 1）</li> </ol> <p>最终 X 的值在缓存中是 1（旧值），在主从库中是 2（新值），也发生不一致。</p> <p>看到了么？这 2 个问题的核心在于：<strong>缓存都被回种了「旧值」</strong>。</p> <p>那怎么解决这类问题呢？</p> <p>最有效的办法就是，<strong>把缓存删掉</strong>。</p> <p>但是，不能立即删，而是需要「延迟删」，这就是业界给出的方案：<strong>缓存延迟双删策略</strong>。</p> <p>按照延时双删策略，这 2 个问题的解决方案是这样的：</p> <p><strong>解决第一个问题</strong>：在线程 A 删除缓存、更新完数据库之后，先「休眠一会」，再「删除」一次缓存。</p> <p><strong>解决第二个问题</strong>：线程 A 可以生成一条「延时消息」，写到消息队列中，消费者延时「删除」缓存。</p> <p>这两个方案的目的，都是为了把缓存清掉，这样一来，下次就可以从数据库读取到最新值，写入缓存。</p> <p>但问题来了，这个「延迟删除」缓存，延迟时间到底设置要多久呢？</p> <ul> <li>问题1：延迟时间要大于「主从复制」的延迟时间</li> <li>问题2：延迟时间要大于线程 B 读取数据库 + 写入缓存的时间</li> </ul> <p>但是，<strong>这个时间在分布式和高并发场景下，其实是很难评估的。</strong></p> <p>很多时候，我们都是凭借经验大致估算这个延迟时间，例如延迟 1-5s，只能尽可能地降低不一致的概率。</p> <p>所以你看，采用这种方案，也只是尽可能保证一致性而已，极端情况下，还是有可能发生不一致。</p> <p>所以实际使用中，我还是建议你采用「先更新数据库，再删除缓存」的方案，同时，要尽可能地保证「主从复制」不要有太大延迟，降低出问题的概率。</p> <h2>可以做到强一致吗？</h2> <p>看到这里你可能会想，这些方案还是不够完美，我就想让缓存和数据库「强一致」，到底能不能做到呢？</p> <p>其实很难。</p> <p>要想做到强一致，最常见的方案是 2PC、3PC、Paxos、Raft 这类一致性协议，但它们的性能往往比较差，而且这些方案也比较复杂，还要考虑各种容错问题。</p> <p>相反，这时我们换个角度思考一下，我们引入缓存的目的是什么？</p> <p>没错，<strong>性能</strong>。</p> <p>一旦我们决定使用缓存，那必然要面临一致性问题。性能和一致性就像天平的两端，无法做到都满足要求。</p> <p>而且，就拿我们前面讲到的方案来说，当操作数据库和缓存完成之前，只要有其它请求可以进来，都有可能查到「中间状态」的数据。</p> <p>所以如果非要追求强一致，那必须要求所有更新操作完成之前期间，不能有「任何请求」进来。</p> <p>虽然我们可以通过加「分布锁」的方式来实现，但我们要付出的代价，很可能会超过引入缓存带来的性能提升。</p> <p>所以，既然决定使用缓存，就必须容忍「一致性」问题，我们只能尽可能地去降低问题出现的概率。</p> <p>同时我们也要知道，缓存都是有「失效时间」的，就算在这期间存在短期不一致，我们依旧有失效时间来兜底，这样也能达到最终一致。</p> <h2>总结</h2> <p>好了，总结一下这篇文章的重点。</p> <p>1、想要提高应用的性能，可以引入「缓存」来解决</p> <p>2、引入缓存后，需要考虑缓存和数据库一致性问题，可选的方案有：「更新数据库 + 更新缓存」、「更新数据库 + 删除缓存」</p> <p>3、更新数据库 + 更新缓存方案，在「并发」场景下无法保证缓存和数据一致性，且存在「缓存资源浪费」和「机器性能浪费」的情况发生</p> <p>4、在更新数据库 + 删除缓存的方案中，「先删除缓存，再更新数据库」在「并发」场景下依旧有数据不一致问题，解决方案是「延迟双删」，但这个延迟时间很难评估，所以推荐用「先更新数据库，再删除缓存」的方案</p> <p>5、在「先更新数据库，再删除缓存」方案下，为了保证两步都成功执行，需配合「消息队列」或「订阅变更日志」的方案来做，本质是通过「重试」的方式保证数据一致性</p> <p>6、在「先更新数据库，再删除缓存」方案下，「读写分离 + 主从库延迟」也会导致缓存和数据库不一致，缓解此问题的方案是「延迟双删」，凭借经验发送「延迟消息」到队列中，延迟删除缓存，同时也要控制主从库延迟，尽可能降低不一致发生的概率</p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-43738.htm">58同城宠物狗狗领养（58同城领养小狗狗）</a></p>
                                        <p>下一个：<a href="/news/article-44234.htm">动物疫苗研制过程图片（动物疫苗研究）</a></p>
                                    </div>
                            </div>
            <div class="col-md-4 w3l-services">
                <h3 class="title-big mb-sm-3 mb-3">热门文章</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/news/article-32997.htm">狗粮制造机多少钱（狗粮加工机多少钱）</a></h4>
                <p>摘要：       今天给各位分享狗粮制造机多少钱的知识，其中也会对狗粮加工机多少钱进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、投资一个狗粮加工厂大约需多.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/news/article-32520.htm">佳雯宠物医院环城西路店（佳雯宠物医院环城东路分院怎么样）</a></h4>
                <p>摘要：       今天给各位分享佳雯宠物医院环城西路店的知识，其中也会对佳雯宠物医院环城东路分院怎么样进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、佳雯宠.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/free-nodes/2024-11-9-free-high-speed-nodes.htm">11月9日更新19.9M/S，2024年最新高速Shadowrocket/V2ray/SSR/Clash订阅链接免费节点订阅</a></h4>
                <p>这一次的节点更新覆盖了日本、韩国、加拿大、新加坡、美国、香港、欧洲等地区,最高速度可达19.9 M/S。只需复制下方的Clash/v2ray订阅链接,在客户端添加后即可正常使用。</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/news/article-35377.htm">义乌领养宠物的地方 义乌领养宠物的地方在哪里</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于义乌领养宠物的地方的问题，于是小编就整理了1个相关介绍义乌领养宠物的地方的解答，让我们一起看看吧。陈江河 为什么 收养 邱岩？陈</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/news/article-35376.htm">厦门市宠物领养中心地址（厦门领养宠物猫中心）</a></h4>
                <p>摘要：       今天给各位分享厦门市宠物领养中心地址的知识，其中也会对厦门领养宠物猫中心进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、厦门宠物猫在哪买..</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/free-nodes/2025-1-3-free-clash-subscribe.htm">1月3日更新22.4M/S，2025年最新高速Shadowrocket/Clash/V2ray/SSR订阅链接免费节点地址分享</a></h4>
                <p>这一次的节点更新覆盖了美国、日本、新加坡、香港、欧洲、加拿大、韩国等地区,最高速度可达22.4 M/S。只需复制下方的Clash/v2ray订阅链接,在客户端添加后即可正常使用。</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/news/article-20411.htm">去宠物店给猫咪驱虫一次多少钱（去宠物店给猫咪驱虫多少钱?）</a></h4>
                <p>摘要：       今天给各位分享去宠物店给猫咪驱虫一次多少钱的知识，其中也会对去宠物店给猫咪驱虫多少钱?进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、去宠.</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/news/article-41749.htm">动物疫苗间隔时间多长有效期（动物疫苗注射后多久产生抗体）</a></h4>
                <p>摘要：       本篇文章给大家谈谈动物疫苗间隔时间多长有效期，以及动物疫苗注射后多久产生抗体对应的知识点，希望对各位有所帮助，不要忘了收藏本站喔。本文目录一览：1、狗狗要隔多久打一次疫苗?要打..</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/news/article-26407.htm">动物生物疫苗工资 动物生物疫苗工资高吗</a></h4>
                <p>摘要：       大家好，今天小编关注到一个比较有意思的话题，就是关于动物生物疫苗工资的问题，于是小编就整理了4个相关介绍动物生物疫苗工资的解答，让我们一起看看吧。牧原兽医待遇怎么样？万泰生物待遇怎</p>
            </div>
        </div>
    </div>
</div>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                <h4><a href="/news/article-49694.htm">动物疫苗的种类及特点（动物疫苗的种类及特点是什么）</a></h4>
                <p>摘要：       今天给各位分享动物疫苗的种类及特点的知识，其中也会对动物疫苗的种类及特点是什么进行解释，如果能碰巧解决你现在面临的问题，别忘了关注本站，现在开始吧！本文目录一览：1、动物防疫技术.</p>
            </div>
        </div>
    </div>
</div>

<h3 class="title-big mb-sm-3 mb-3">归纳</h3>
<div class="row w3l-achievements">
    <div class="col-lg-12 item">
        <div class="card">
            <div class="box-wrap">
                                <h4><span class="badge" style="float: right;">18</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
                                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
                                <h4><span class="badge" style="float: right;">93</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
                                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
                            </div>
        </div>
    </div>
</div>
            </div>
        </div>
    </div>
        <!-- Footer -->
    <section class="w3l-footer py-sm-5 py-4">
        <div class="container">
            <div class="footer-content">
                <div class="row">
                    <div class="col-lg-8 footer-left">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                        <p class="m-0">Clash Node官网订阅站 版权所有</p>
                    </div>
                    <div class="col-lg-4 footer-right text-lg-right text-center mt-lg-0 mt-3">
                        <ul class="social m-0 p-0">
                            <li><a href="#facebook"><span class="fa fa-facebook-official"></span></a></li>
                            <li><a href="#linkedin"><span class="fa fa-linkedin-square"></span></a></li>
                            <li><a href="#instagram"><span class="fa fa-instagram"></span></a></li>
                            <li><a href="#twitter"><span class="fa fa-twitter"></span></a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- move top -->
        <button onclick="topFunction()" id="movetop" title="Go to top">
            <span class="fa fa-angle-up"></span>
        </button>
        <script>
        // When the user scrolls down 20px from the top of the document, show the button
        window.onscroll = function() {
            scrollFunction()
        };

        function scrollFunction() {
            if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
                document.getElementById("movetop").style.display = "block";
            } else {
                document.getElementById("movetop").style.display = "none";
            }
        }

        // When the user clicks on the button, scroll to the top of the document
        function topFunction() {
            document.body.scrollTop = 0;
            document.documentElement.scrollTop = 0;
        }
        </script>
        <!-- /move top -->
    </section>
    <!-- //Footer -->
    <!-- all js scripts and files here -->
    <script src="/assets/website/js/frontend/clashnode/theme-change.js"></script><!-- theme switch js (light and dark)-->
    <script src="/assets/website/js/frontend/clashnode/jquery-3.5.1.min.js"></script><!-- default jQuery -->
    <!-- /typig-text-->
    <script>
    const typedTextSpan = document.querySelector(".typed-text");
    const cursorSpan = document.querySelector(".cursor");

    const textArray = ["UI/UX Designer", "Freelancer", "Web developer"];
    const typingDelay = 200;
    const erasingDelay = 10;
    const newTextDelay = 100; // Delay between current and next text
    let textArrayIndex = 0;
    let charIndex = 0;

    function type() {
        if (charIndex < textArray[textArrayIndex].length) {
            if (!cursorSpan.classList.contains("typing")) cursorSpan.classList.add("typing");
            typedTextSpan.textContent += textArray[textArrayIndex].charAt(charIndex);
            charIndex++;
            setTimeout(type, typingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            setTimeout(erase, newTextDelay);
        }
    }

    function erase() {
        if (charIndex > 0) {
            // add class 'typing' if there's none
            if (!cursorSpan.classList.contains("typing")) {
                cursorSpan.classList.add("typing");
            }
            typedTextSpan.textContent = textArray[textArrayIndex].substring(0, 0);
            charIndex--;
            setTimeout(erase, erasingDelay);
        } else {
            cursorSpan.classList.remove("typing");
            textArrayIndex++;
            if (textArrayIndex >= textArray.length) textArrayIndex = 0;
            setTimeout(type, typingDelay);
        }
    }

    document.addEventListener("DOMContentLoaded", function() { // On DOM Load initiate the effect
        if (textArray.length) setTimeout(type, newTextDelay + 250);
    });
    </script>
    <!-- //typig-text-->
    <!-- services owlcarousel -->
    <script src="/assets/website/js/frontend/clashnode/owl.carousel.js"></script>
    <!-- script for services -->
    <script>
    $(document).ready(function() {
        $('.owl-two').owlCarousel({
            loop: true,
            margin: 30,
            nav: false,
            responsiveClass: true,
            autoplay: false,
            autoplayTimeout: 5000,
            autoplaySpeed: 1000,
            autoplayHoverPause: false,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                480: {
                    items: 1,
                    nav: false
                },
                700: {
                    items: 1,
                    nav: false
                },
                1090: {
                    items: 3,
                    nav: false
                }
            }
        })
    })
    </script>
    <!-- //script for services -->
    <!-- script for tesimonials carousel slider -->
    <script>
    $(document).ready(function() {
        $("#owl-demo1").owlCarousel({
            loop: true,
            margin: 20,
            nav: false,
            responsiveClass: true,
            responsive: {
                0: {
                    items: 1,
                    nav: false
                },
                736: {
                    items: 1,
                    nav: false
                },
                1000: {
                    items: 2,
                    nav: false,
                    loop: false
                }
            }
        })
    })
    </script>
    <!-- //script for tesimonials carousel slider -->
    <!-- video popup -->
    <script src="/assets/website/js/frontend/clashnode/jquery.magnific-popup.min.js"></script>
    <script>
    $(document).ready(function() {
        $('.popup-with-zoom-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-zoom-in'
        });

        $('.popup-with-move-anim').magnificPopup({
            type: 'inline',

            fixedContentPos: false,
            fixedBgPos: true,

            overflowY: 'auto',

            closeBtnInside: true,
            preloader: false,

            midClick: true,
            removalDelay: 300,
            mainClass: 'my-mfp-slide-bottom'
        });
    });
    </script>
    <!-- //video popup -->
    <!-- stats number counter-->
    <script src="/assets/website/js/frontend/clashnode/jquery.waypoints.min.js"></script>
    <script src="/assets/website/js/frontend/clashnode/jquery.countup.js"></script>
    <script>
    $('.counter').countUp();
    </script>
    <!-- //stats number counter -->
    <!-- disable body scroll which navbar is in active -->
    <script>
    $(function() {
        $('.navbar-toggler').click(function() {
            $('body').toggleClass('noscroll');
        })
    });
    </script>
    <!-- disable body scroll which navbar is in active -->
    <!--/MENU-JS-->
    <script>
    $(window).on("scroll", function() {
        var scroll = $(window).scrollTop();

        if (scroll >= 80) {
            $("#site-header").addClass("nav-fixed");
        } else {
            $("#site-header").removeClass("nav-fixed");
        }
    });

    //Main navigation Active Class Add Remove
    $(".navbar-toggler").on("click", function() {
        $("header").toggleClass("active");
    });
    $(document).on("ready", function() {
        if ($(window).width() > 991) {
            $("header").removeClass("active");
        }
        $(window).on("resize", function() {
            if ($(window).width() > 991) {
                $("header").removeClass("active");
            }
        });
    });
    </script>
    <!--//MENU-JS-->
    <!-- bootstrap js -->
    <script src="/assets/website/js/frontend/clashnode/bootstrap.min.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>